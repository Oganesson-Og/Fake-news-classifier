import pandas as pd
import nltk
from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
import re
from sklearn.model_selection import train_test_split
pd.pandas.set_option('display.max_columns', None)
import xgboost


data_set = pd.read_csv('C:/Users/Admin/Documents/Fake_or_Real_news/fake_or_real_news.csv')
label_dict = {'REAL': 0, 'FAKE': 1}
data_set.replace(label_dict, inplace=True)

y = data_set.pop('label')
messages = data_set.copy()
#print(data_set.head())

word_net = WordNetLemmatizer()

corpus = []
for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])
    review = review.lower()
    review = review.split()
    review = [word_net.lemmatize(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)


cv = CountVectorizer(max_features=5000, ngram_range=(1, 3))
X = cv.fit_transform(corpus).toarray()
print(X.shape)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
estimator = MultinomialNB()
estimator.fit(X_train, y_train)
y_pred = estimator.predict(X_test)
result = confusion_matrix(y_test, y_pred)
accurac = accuracy_score(y_test, y_pred)
print(result)
print(f'The Naive Bayes accuracy is {accurac*100}')

estimator_1 = xgboost.XGBClassifier()
estimator_1.fit(X_train, y_train)
y_pred_1 = estimator_1.predict(X_test)
result = confusion_matrix(y_test, y_pred_1)
accuracy_1 = accuracy_score(y_test, y_pred_1)
print(result)
print(f'The XG boost accuracy is {accuracy_1*100}')



